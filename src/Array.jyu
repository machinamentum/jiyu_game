
let NEW_MEM_CHUNK_ELEMENT_COUNT = 16;

func array_reserve<T>(array: *[..] T, _amount: int) {
    var amount = _amount;
    if amount <= 0
        amount = NEW_MEM_CHUNK_ELEMENT_COUNT;

    var new_mem = cast(*T) malloc(amount * sizeof(T));

    if array.data != null {
        memcpy(new_mem, array.data, cast(size_t) (array.count * sizeof(T)) );
        free(array.data);
    }

    array.data = new_mem;
    array.allocated = amount;
}

func array_resize<T>(array: *[..] T, _amount: int) {
    array_reserve(array, _amount);
    array.count = _amount;
}

func array_add<T>(array: *[..] T, item: T) {
    if (array.count+1 >= array.allocated) array_reserve(array, cast(int) 
    
    array.allocated + NEW_MEM_CHUNK_ELEMENT_COUNT);

    array.count = array.count + 1;
    (<<array)[array.count-1] = item;
}

func array_reset<T>(array: *[..] T) {
    array.count = 0;
    array.allocated = 0;

    if array.data != null free(array.data);
    array.data = null;
}

