
#import "Array";
#import "GLFW";
#import "OpenGL";
#import "LibC";
#import "Basic";
#import "Compiler";

#load "render.jyu";
#load "obj_loader.jyu";
#load "NBT.jyu";
#load "nuklear.jyu";

#if os(Windows) {
    #load "LibOVR.jyu";
}

#load "Engine.jyu";

var renderer: Renderer; // maybe this should be managed in render, code outside render shouldn't see it ?

var shader_default: Shader;
var shader_ui: Shader;

struct Game {
    var ui_context     : nk_context;
    var ui_cmds_buffer : nk_buffer;
    var ui_null_texture: nk_draw_null_texture;

    var inputs_this_frame: [..] Input_Event;
}

struct Input_Event {
    enum Type {
        MOUSE_MOVE;
        MOUSE_BUTTON_LEFT;
        MOUSE_BUTTON_RIGHT;
    }

    var type: Type;

    var button_state: int32;

    var mouse_x: double;
    var mouse_y: double;
}

var game: Game;

func render_entity_and_children(e: *Entity, local_to_world: Matrix4, override_shader: *Shader) {
    if e.model {
        var shader = *shader_default;
        if override_shader {
            shader = override_shader;
        }

        var local_transform = Matrix4.translate(e.position);
        var final_transform = local_transform * local_to_world;

        use_shader(*renderer, shader, final_transform);
        render_model(e.model);
    }
}

func render_scene(scene: Scene) {
    var world_offset = Matrix4.identity();
    render_entity_and_children(scene.root, world_offset, null);
}

func error_callback(error: int32, description: *uint8) {
    printf("[GLFW] %s\n", description);
}

func load_behavior_for_entity(entity: *Entity, code: string) -> bool {
    var options: Build_Options;
    options.only_want_obj_file = true;
    var compiler = create_compiler_instance(*options);

    compiler_add_module_search_path(compiler, "modules");

    if compiler_load_string(compiler, code) != true return false;
    if compiler_typecheck_program(compiler) != true return false ;
    if compiler_generate_llvm_module(compiler) != true return false;

    // New function to JIT the entire program.
    if compiler_jit_program(compiler) != true return false;

    entity.on_update = cast() compiler_jit_lookup_symbol(compiler, "on_update");
}

func key_callback(window: *GLFWwindow, key: int32, scancode: int32, action: int32, mods: int32) -> void {

}

func cursor_callback(window: *GLFWwindow, xpos: double, ypos: double) {
    var ev: Input_Event;
    ev.type = .MOUSE_MOVE;
    ev.mouse_x = xpos;
    ev.mouse_y = ypos;

    game.inputs_this_frame.add(ev);
}

func mouse_button_callback(window: *GLFWwindow, button: int32, action: int32, mods: int32) -> void {
    var ev: Input_Event;
    if      (button == GLFW_MOUSE_BUTTON_LEFT ) ev.type = .MOUSE_BUTTON_LEFT;
    else if (button == GLFW_MOUSE_BUTTON_RIGHT) ev.type = .MOUSE_BUTTON_RIGHT;
    else return;

    if (action == GLFW_RELEASE) ev.button_state = 0;
    else                        ev.button_state = 1;

    game.inputs_this_frame.add(ev); 

}

func main(argc: int32, argv: **uint8) {

    // Oculus.init();

    var is_run_as_metaprogram = false;
    for 0..argc-1 {
        var s: string;
        s.data = argv[it];
        s.length = cast() strlen(s.data);

        if s == "meta" {
            is_run_as_metaprogram = true;
        }
    }

    // If we're run as a metaprogram, assume build.jyu has changed directory to the run_tree.
    if !is_run_as_metaprogram {
        var exe_path = get_executable_path();
        #if defined(DEBUG) {
            printf("Exe path: '%.*s'\n", exe_path.length, exe_path.data);
        }
        set_working_directory(basename(exe_path));
    }
    
    {
        var cwd = get_working_directory();
        printf("CWD: %.*s\n", cwd.length, cwd.data);
    }

    if !glfwInit() return;

    glfwSetErrorCallback(cast() error_callback);

    #if os(MacOSX) {
        glfwWindowHint (GLFW_CONTEXT_VERSION_MAJOR, 3);
        glfwWindowHint (GLFW_CONTEXT_VERSION_MINOR, 2);
        glfwWindowHint (GLFW_OPENGL_FORWARD_COMPAT, cast() GL_TRUE);
        glfwWindowHint (GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
    } else {
        // glfwWindowHint(GLFW_CONTEXT_CREATION_API, GLFW_EGL_CONTEXT_API);
        glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
        glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 0);
        glfwWindowHint(GLFW_CLIENT_API, GLFW_OPENGL_ES_API);
    }

    glfwWindowHint(GLFW_SCALE_TO_MONITOR, 1);

    let INITIAL_WIDTH  = 1280;
    let INITIAL_HEIGHT = 720;

    var window = glfwCreateWindow(INITIAL_WIDTH, INITIAL_HEIGHT, "Hello, Sailor!", null, null);
    glfwMakeContextCurrent(window);
    glfwSetKeyCallback(window, cast() key_callback);
    glfwSetCursorPosCallback(window, cast() cursor_callback);
    glfwSetMouseButtonCallback(window, cast() mouse_button_callback);

    func get_proc(name: string) -> *void {
        var addr = glfwGetProcAddress(name.data);
        #if defined(DEBUG) {
            printf("%.*s: %p\n", name.length, name.data, addr);
        }
        return addr;
    }

    init_gl_functions(get_proc);

    renderer.init();

    {
        var vertex_source   = read_entire_file("data/shaders/basic_light_vertex.glsl");
        var fragment_source = read_entire_file("data/shaders/basic_light_fragment.glsl");
        shader_default = compile_shader(vertex_source.result, fragment_source.result);
    }

    {
        var vertex_source   = read_entire_file("data/shaders/basic_vertex.glsl");
        var fragment_source = read_entire_file("data/shaders/basic_fragment.glsl");
        shader_ui = compile_shader(vertex_source.result, fragment_source.result);
    }

    var width : float = INITIAL_WIDTH;
    var height: float = INITIAL_HEIGHT;

    var light: Light;
    light.position = Vector3.make(0, 1, 0);

    renderer.lights.add(light);

    var scene: Scene;

    var root_entity: Entity;
    var model = load_obj("data/models/monkey.obj");
    root_entity.model = *model;

    var behavior_script = read_entire_file("data/scripts/test_script.jyu"); // @Leak
    load_behavior_for_entity(*root_entity, behavior_script.result);

    scene.root = *root_entity;

    var atlas: nk_font_atlas;
    var font: *nk_font;
    nk_font_atlas_init_default(*atlas);
    nk_font_atlas_begin(*atlas);
    font = nk_font_atlas_add_default(*atlas, 13, null);
    
    var w: int32;
    var h: int32;
    var image = nk_font_atlas_bake(*atlas, *w, *h, NK_FONT_ATLAS_RGBA32);
    var font_texture = Texture.upload_rgba_image(image, w, h);
    printf("font texture: %d\n", font_texture.handle);
    var nkh = nk_handle_id(cast(int32) font_texture.handle);
    printf("nkh: %d\n", nkh.id);
    nk_font_atlas_end(*atlas, nk_handle_id(cast(int32)font_texture.handle), *game.ui_null_texture);

    let EASY = 1;
    let HARD = 2;
    var op: int32 = EASY;
    var value: float = 0.6;
    var i: int32 =  20;
    let MAX_MEMORY = 4096 * 4096;
    nk_init_fixed(*game.ui_context, calloc(1, MAX_MEMORY), MAX_MEMORY, *font.handle);
    nk_buffer_init_default(*game.ui_cmds_buffer);

    glDisable(GL_CULL_FACE);

    var last_mx: double;
    var last_my: double;

    while glfwWindowShouldClose(window) == false {

        nk_input_begin(ctx);
        for game.inputs_this_frame {
            switch it.type {
                case .MOUSE_MOVE:
                    nk_input_motion(ctx, cast() it.mouse_x, cast() it.mouse_y);
                    last_mx = it.mouse_x;
                    last_my = it.mouse_y;
                case .MOUSE_BUTTON_LEFT:
                    nk_input_button(ctx, NK_BUTTON_LEFT, cast() last_mx, cast() last_my, it.button_state);
                case .MOUSE_BUTTON_RIGHT:
                    nk_input_button(ctx, NK_BUTTON_RIGHT, cast() last_mx, cast() last_my, it.button_state);
            }
        }
        nk_input_end(ctx);

        game.inputs_this_frame.reset();

        glClearColor(0, 0, 0, 1);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        root_entity.on_update(1.0/60.0);

        renderer.projection_matrix = Matrix4.perspective(90, width / height, 1, 1000);
        renderer.view_matrix = Matrix4.identity();

        glEnable(GL_DEPTH_TEST);
        render_scene(scene);
        glDisable(GL_DEPTH_TEST);

        var ctx = *game.ui_context;
        if (nk_begin(ctx, "Show", nk_rect(50, 50, 220, 220), cast() (NK_WINDOW_BORDER|NK_WINDOW_MOVABLE|NK_WINDOW_CLOSABLE))) {
            // fixed widget pixel width
            nk_layout_row_static(ctx, 30, 80, 1);
            if (nk_button_label(ctx, "button")) {
                // event handling
            }

            // fixed widget window ratio width
            nk_layout_row_dynamic(ctx, 30, 2);
            if (nk_option_label(ctx, "easy", op - HARD))  op = EASY;
            if (nk_option_label(ctx, "hard", op - EASY)) op = HARD;

            // custom widget pixel width
            nk_layout_row_begin(ctx, NK_STATIC, 30, 2);
            {
                nk_layout_row_push(ctx, 50);
                nk_label(ctx, "Volume:", cast() NK_TEXT_LEFT);
                nk_layout_row_push(ctx, 110);
                nk_slider_float(ctx, 0, *value, 1.0, 0.1);
            }
            nk_layout_row_end(ctx);
        }
        nk_end(ctx);

        renderer.projection_matrix = Matrix4.ortho(0, width, height, 0, -1, 1);
        renderer.view_matrix = Matrix4.identity();
        use_shader(*renderer, *shader_ui, Matrix4.identity());
        use_texture(*shader_ui, *font_texture);
        draw_ui(cast() width, cast() height, NK_ANTI_ALIASING_OFF);

        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    glfwTerminate();
}
