#import "Math";

let ATTRIB_POSITION : GLuint = 0;
let ATTRIB_NORMAL   : GLuint = 1;
let ATTRIB_TEX_COORD: GLuint = 2;
let ATTRIB_COLOR    : GLuint = 3;

struct Renderer {
    var global_vao_handle: GLuint;

    var projection_matrix: Matrix4;
    var view_matrix: Matrix4;

    var lights: [..] Light;
}

struct Light {
    var position: Vector3;
}

struct Texture {
    var handle: GLuint;
    var width : int;
    var height: int;

    func delete(this: *Texture) {
        glDeleteTextures(1, *this.handle);
        this.handle = 0;
    }

    func upload_rgba_image(data: *void, width: int, height: int) -> Texture {
        var texture: Texture;
        glGenTextures(1, *texture.handle);
        glBindTexture(GL_TEXTURE_2D, texture.handle);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, cast(GLsizei)width, cast(GLsizei)height, 0, GL_RGBA, GL_UNSIGNED_BYTE, data);

        texture.width  = width;
        texture.height = height;
        return texture;
    }
}

func init(renderer: *Renderer) {
    glGenVertexArrays(1, *renderer.global_vao_handle);
    glBindVertexArray(renderer.global_vao_handle);
}

func make_Vector3(x: float, y: float, z: float) -> Vector3 {
    return Vector3.make(x, y, z);
}

struct Shader {
    var handle: GLuint;
}

func use_shader(renderer: *Renderer, sh: *Shader, model_matrix: Matrix4) {
    glUseProgram(sh.handle);

    var proj  = glGetUniformLocation(sh.handle, "projection");
    var view  = glGetUniformLocation(sh.handle, "view");
    var model = glGetUniformLocation(sh.handle, "model");

    glUniformMatrix4fv(proj, 1, GL_TRUE, cast() renderer.projection_matrix.m.data);
    glUniformMatrix4fv(view, 1, GL_TRUE, cast() renderer.view_matrix.m.data);

    glUniformMatrix4fv(model, 1, GL_TRUE, cast() model_matrix.m.data);

    for 0..renderer.lights.count-1 {
        var light = *renderer.lights[it];
        // @Incomplete
        var position = glGetUniformLocation(sh.handle, "lights[0].position");

        glUniform3fv(position, 1, cast(*GLfloat) *light.position);
    }
}

func use_texture(sh: *Shader, texture: *Texture) {
    var tex = glGetUniformLocation(sh.handle, "color_texture");
    glUniform1i(tex, 0);
}

func compile_shader_source(_source: string, type: GLenum) -> GLuint {
    var source = _source;

    var v = glCreateShader(type);

    var source_datas: [..] *uint8;
    var source_lengths: [..] GLint;

    #if os(MacOSX) {
        let VERSION_STRING = "#version 330 core";
    } else {
        let VERSION_STRING = "#version 300 es\nprecision highp float;\n";
    }

    source_datas.add(VERSION_STRING.data);
    source_lengths.add(cast(GLint) VERSION_STRING.length);

    source_datas.add(source.data);
    source_lengths.add(cast(GLint) source.length);

    glShaderSource(v, cast() source_datas.count, source_datas.data, source_lengths.data);
    glCompileShader(v);

    source_datas.reset();
    source_lengths.reset();

    var status: GLint;
    glGetShaderiv(v, GL_COMPILE_STATUS, *status);

    if status == cast(GLint) GL_FALSE {
        var len: GLint;
        glGetShaderiv(v, GL_INFO_LOG_LENGTH, *len);
        var buf = cast(*uint8) malloc(cast(size_t) len);

        glGetShaderInfoLog(v, len, *len, buf);
        printf("ERROR: %.*s\n", len, buf);

        free(buf);

        glDeleteShader(v);
        return 0;
    }

    return v;
}

func compile_shader(vertex: string, pixel: string) -> Shader {
    var vert = compile_shader_source(vertex, GL_VERTEX_SHADER);
    var frag = compile_shader_source(pixel,  GL_FRAGMENT_SHADER);

    var out: Shader;

    if vert == 0 || frag == 0 {
        glDeleteShader(vert);
        glDeleteShader(frag);
        return out;
    }

    var program = glCreateProgram();
    glAttachShader(program, vert);
    glAttachShader(program, frag);
    glLinkProgram(program);

    var status: GLint;
    glGetProgramiv(program, GL_LINK_STATUS, *status);
    if (status == cast(GLint) GL_FALSE) {
        var len: GLint;
        glGetProgramiv(program, GL_INFO_LOG_LENGTH, *len);
        var buf = cast(*uint8) malloc(cast(size_t) len);
        glGetProgramInfoLog(program, cast() len, cast() *len, buf);
        printf("ERROR: %.*s\n", len, buf);
        free(buf);

        glDeleteProgram(program);
        glDeleteShader(vert);
        glDeleteShader(frag);

        out.handle = 0;
        return out;
    }

    glDetachShader(program, vert);
    glDetachShader(program, frag);

    out.handle = program;
    return out;
}

func cache_to_vertex_buffer(model: *Model) {
    if model.vbo_handle == 0 {
        glGenBuffers(1, *model.vbo_handle);
    }

    // @Cleanup UnaryNot
    if model.is_dirty == false {
        return;
    }

    var vert_size   = model.vertices.count*sizeof(Vector3);
    var normal_size = model.normals.count*sizeof(Vector3);
    var tex_size    = model.tex_coords.count*sizeof(Vector3);

    var total_size = vert_size+normal_size+tex_size;

    glBindBuffer(GL_ARRAY_BUFFER, model.vbo_handle);
    glBufferData(GL_ARRAY_BUFFER, cast(GLsizei) total_size, null, GL_STATIC_DRAW);

    glBufferSubData(GL_ARRAY_BUFFER, 0,         vert_size,   model.vertices.data);
    glBufferSubData(GL_ARRAY_BUFFER, vert_size, normal_size, model.normals.data);
    glBufferSubData(GL_ARRAY_BUFFER, vert_size+normal_size, tex_size, model.tex_coords.data);

    glBindBuffer(GL_ARRAY_BUFFER, 0);

    model.is_dirty = false;
}

func render_model(model: *Model) {
    cache_to_vertex_buffer(model);

    glBindBuffer(GL_ARRAY_BUFFER, model.vbo_handle);
    glEnableVertexAttribArray(ATTRIB_POSITION);
    glEnableVertexAttribArray(ATTRIB_NORMAL);

    var vert_size   = model.vertices.count*sizeof(Vector3);
    var normal_size = model.normals.count*sizeof(Vector3);
    var tex_size    = model.tex_coords.count*sizeof(Vector3);

    glVertexAttribPointer(ATTRIB_POSITION, 3, GL_FLOAT, GL_FALSE, sizeof(Vector3), cast(*void) 0);
    glVertexAttribPointer(ATTRIB_NORMAL,   3, GL_FLOAT, GL_FALSE, sizeof(Vector3), cast(*void) vert_size);

    glDrawArrays(GL_TRIANGLES, 0, cast(GLint) model.vertices.count);

    glDisableVertexAttribArray(ATTRIB_POSITION);
    glDisableVertexAttribArray(ATTRIB_NORMAL);

    glBindBuffer(GL_ARRAY_BUFFER, 0);
}

func draw_ui(width: int, height: int, AA: nk_anti_aliasing) {
    struct UI_Vertex {
        var position: Vector3;
        var uv: Vector3;
        var col: [4] uint8;
    }

    let MAX_VERTEX_MEMORY  = 512 * 1024;
    let MAX_ELEMENT_MEMORY = 128 * 1024;
    func make_draw_vertex_layout_element(attribute: nk_draw_vertex_layout_attribute, format: nk_draw_vertex_layout_format, offset: nk_size) -> nk_draw_vertex_layout_element {
        var el: nk_draw_vertex_layout_element;
        el.attribute = attribute;
        el.format = format;
        el.offset = offset;
        return el;
    }

    var ctx = *game.ui_context;
    glEnable(GL_BLEND);
    glBlendEquation(GL_FUNC_ADD);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
    glDisable(GL_CULL_FACE);
    glDisable(GL_DEPTH_TEST);
    glEnable(GL_SCISSOR_TEST);
    glActiveTexture(GL_TEXTURE0);

    {
        var vertices: *void;
        var elements: *void;

        var vbo: GLuint;
        var ebo: GLuint;
        glGenBuffers(1, *vbo);
        glGenBuffers(1, *ebo);

        glBindBuffer(GL_ARRAY_BUFFER, vbo);
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ebo);

        glBufferData(GL_ARRAY_BUFFER, MAX_VERTEX_MEMORY, null, GL_STREAM_DRAW);
        glBufferData(GL_ELEMENT_ARRAY_BUFFER, MAX_ELEMENT_MEMORY, null, GL_STREAM_DRAW);

        vertices = glMapBufferRange(GL_ARRAY_BUFFER, 0, MAX_VERTEX_MEMORY, GL_MAP_WRITE_BIT);
        elements = glMapBufferRange(GL_ELEMENT_ARRAY_BUFFER, 0, MAX_ELEMENT_MEMORY, GL_MAP_WRITE_BIT);
        assert(vertices != null);
        assert(elements != null);
        {
            // @TODO implement an offsetof() operator
            // @TODO initializer lists
            var vertex_layout: [..] nk_draw_vertex_layout_element;
            vertex_layout.add(make_draw_vertex_layout_element(NK_VERTEX_POSITION, NK_FORMAT_FLOAT, 0));
            vertex_layout.add(make_draw_vertex_layout_element(NK_VERTEX_TEXCOORD, NK_FORMAT_FLOAT, sizeof(Vector3)));
            vertex_layout.add(make_draw_vertex_layout_element(NK_VERTEX_COLOR, NK_FORMAT_R8G8B8A8, sizeof(Vector3) + sizeof(Vector3)));
            vertex_layout.add(make_draw_vertex_layout_element(NK_VERTEX_ATTRIBUTE_COUNT,NK_FORMAT_COUNT,0));

            var config: nk_convert_config;
            config.vertex_layout    = vertex_layout.data;
            config.vertex_size      = sizeof(UI_Vertex);
            config.vertex_alignment = alignof(UI_Vertex);
            config._null = game.ui_null_texture;
            config.circle_segment_count = 22;
            config.curve_segment_count = 22;
            config.arc_segment_count = 22;
            config.global_alpha = 1.0;
            config.shape_AA = AA;
            config.line_AA = AA;

            var vbuf: nk_buffer;
            var ebuf: nk_buffer;

            nk_buffer_init_fixed(*vbuf, vertices, MAX_VERTEX_MEMORY);
            nk_buffer_init_fixed(*ebuf, elements, MAX_ELEMENT_MEMORY);
            nk_convert(ctx, *game.ui_cmds_buffer, *vbuf, *ebuf, *config);

            vertex_layout.reset();
        }
        glUnmapBuffer(GL_ARRAY_BUFFER);
        glUnmapBuffer(GL_ELEMENT_ARRAY_BUFFER);

        glEnableVertexAttribArray(ATTRIB_POSITION);
        glEnableVertexAttribArray(ATTRIB_COLOR);
        glEnableVertexAttribArray(ATTRIB_TEX_COORD);

        glVertexAttribPointer(ATTRIB_POSITION, 3, GL_FLOAT, GL_FALSE, strideof(UI_Vertex), cast(*void)0);
        glVertexAttribPointer(ATTRIB_TEX_COORD, 3, GL_FLOAT, GL_FALSE, strideof(UI_Vertex), cast(*void) sizeof(Vector3));
        glVertexAttribPointer(ATTRIB_COLOR, 4, GL_UNSIGNED_BYTE, GL_TRUE, strideof(UI_Vertex), cast(*void) (sizeof(Vector3) * 2));

        glBindBuffer(GL_ARRAY_BUFFER, vbo);
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ebo);

//     #define nk_draw_foreach(cmd,ctx, b) for((cmd)=nk__draw_begin(ctx, b); (cmd)!=0; (cmd)=nk__draw_next(cmd, b, ctx))
        var cmd = nk__draw_begin(ctx, *game.ui_cmds_buffer);
        var offset: *nk_draw_index;
        while cmd {
            if (cmd.elem_count == 0) continue;
            glBindTexture(GL_TEXTURE_2D, cast(GLuint)cmd.texture.id);
//             glScissor(
//                 (GLint)(cmd->clip_rect.x),
//                 (GLint)((height - (GLint)(cmd->clip_rect.y + cmd->clip_rect.h))),
//                 (GLint)(cmd->clip_rect.w),
//                 (GLint)(cmd->clip_rect.h));
            glDrawElements(GL_TRIANGLES, cast(GLsizei)cmd.elem_count, GL_UNSIGNED_SHORT, offset);
            offset += cmd.elem_count;
            cmd = nk__draw_next(cmd, *game.ui_cmds_buffer, ctx);
        }
        nk_clear(ctx);

        glBindBuffer(GL_ARRAY_BUFFER, 0);
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);

        glDeleteBuffers(1, *vbo);
        glDeleteBuffers(1, *ebo);

        glDisableVertexAttribArray(ATTRIB_POSITION);
        glDisableVertexAttribArray(ATTRIB_COLOR);
        glDisableVertexAttribArray(ATTRIB_TEX_COORD);
    }

    glUseProgram(0);
    glDisable(GL_BLEND);
    glDisable(GL_SCISSOR_TEST);
}
