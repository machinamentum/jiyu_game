
struct Bsp_Plane {
    var vertices: [3] Vector3;
}

struct Bsp_Triangle {
    var a: Vector3;
    var b: Vector3;
    var c: Vector3;
}

struct Bsp_Tree {
    let EPSILON = 0.05;
    var plane: Bsp_Plane;

    var back: *Bsp_Tree;
    var front: *Bsp_Tree;

    func make() -> Bsp_Tree {
        var empty: Bsp_Tree;
        return empty;
    }

    func plane_equation(plane: Bsp_Plane, p: Vector3) -> float {
        var b_minus_a = Vector3.sub(plane.vertices[1], plane.vertices[0]);
        var c_minus_a = Vector3.sub(plane.vertices[2], plane.vertices[0]);

        return Vector3.dot(Vector3.cross(b_minus_a, c_minus_a), Vector3.sub(p, plane.vertices[0]));
    }

    func add(tree: *Bsp_Tree, triangle: Bsp_Triangle) {
        var fa = plane_equation(tree.plane, triangle.a);
        var fb = plane_equation(tree.plane, triangle.b);
        var fc = plane_equation(tree.plane, triangle.c);

        if fabs(fa) < EPSILON {
            fa = 0;
        }

        if fabs(fb) < EPSILON {
            fb = 0;
        }

        if fabs(fc) < EPSILON {
            fc = 0;
        }


    }
}
