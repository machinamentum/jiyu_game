
#import "Compiler";
#import "LibC";
#import "Array";
#import "Basic";

#if os(Windows) {
    let PATH_SEPERATOR = '\\';
    let OCULUS_SDK_PATH     = "sup\\ovr_sdk_win_1.43.0\\LibOVR\\Lib\\Windows\\x64\\Release\\VS2017";
    let OCULUS_INCLUDE_PATH = "sup\\ovr_sdk_win_1.43.0\\LibOVR\\Include";
} else {
    let PATH_SEPERATOR = '/';
}

func @metaprogram main(argc: int32, argv: **uint8) {
    var as_metaprogram = false;
    for 0..argc-1 {
        var s: string;
        s.data = argv[it];
        s.length = cast() strlen(s.data);

        if s == "meta" {
            as_metaprogram = true;
            // printf("Running game as metaprogram.\n");
        }
    }

    var options: Build_Options;
    options.executable_name = "run_tree/game";
    var compiler = create_compiler_instance(*options);

    var cwd = get_working_directory();
    compiler_add_library_search_path(compiler, cwd);
    #if os(Windows) {
        var builder: String_Builder;
        builder.init();

        builder.append(cwd);
        builder.putchar(PATH_SEPERATOR);
        builder.append(OCULUS_SDK_PATH);

        var path = builder.to_string();
        printf("Oculus path: %.*s\n", path.length, path.data);
        compiler_add_library_search_path(compiler, path);

        free(path.data);

        builder.reset();

        builder.init();

        builder.append(cwd);
        builder.putchar(PATH_SEPERATOR);
        builder.append(OCULUS_INCLUDE_PATH);

        path = builder.to_string();
        printf("Oculus include: %.*s\n", path.length, path.data);
        compiler_add_library_search_path(compiler, path);

        free(path.data);

        builder.reset();
    }

    free(cwd.data);

    if compiler_load_file(compiler, "src/main.jyu") != true return;
    if compiler_typecheck_program(compiler) != true return;
    if compiler_generate_llvm_module(compiler) != true return;

    if as_metaprogram {
        set_working_directory("run_tree");

        var args: [..] *uint8;
        args.add("meta");

        if compiler_run_metaprogram(compiler, cast() args.count, args.data) != true return;
    } else {
        if compiler_emit_object_file(compiler) != true return;
        if compiler_run_default_link_command(compiler) != true return;
    }
}
