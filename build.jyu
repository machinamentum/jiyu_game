
#import "Compiler";
#import "LibC";
#import "Array";
#import "Basic";

/*
func make_directory(path: string) -> bool {
    typealias mode_t = uint32; // @FixMe this is probably not right
    func @c_function mkdir(filename: c_string, mode: mode_t) -> int32; // @Unix
    
    var c_str = to_c_string(path);
    var result = mkdir(c_str, 0x1FF);
    free(c_str);
    
    return result == 0;
}
*/

func make_directory(path: string) -> bool {
    return true;
}

func @metaprogram main(argc: int32, argv: **uint8) {

    var as_metaprogram = false;
    for 0..argc-1 {
        var s: string;
        s.data = argv[it];
        s.length = cast() strlen(s.data);

        if s == "meta" {
            as_metaprogram = true;
            printf("Running game as metaprogram.\n");
        }
    }

    var options: Build_Options;
    options.executable_name = "run_tree/game";
    var compiler = create_compiler_instance(*options);
    
    make_directory("run_tree"); // @FixMe this requires we run build.jyu from the directory it is located in, we need a #filepath mechanism

    compiler_add_library_search_path(compiler, get_working_directory());
    
    if compiler_load_file(compiler, "src/main.jyu") != true return;
    if compiler_typecheck_program(compiler) != true return;
    if compiler_generate_llvm_module(compiler) != true return;

    if as_metaprogram {
        set_working_directory("run_tree");

        var args: [..] *uint8;
        array_add(*args, "meta");

        if compiler_run_metaprogram(compiler, cast() args.count, args.data) != true return;
    } else {
        if compiler_emit_object_file(compiler) != true return;
        if compiler_run_default_link_command(compiler) != true return;
    }
}
