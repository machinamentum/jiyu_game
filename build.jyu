
#import "Compiler";
#import "LibC";
#import "Array";
#import "Basic";
#import "C_Build";

// @TODO write a routine to copy needed DLLs from jiyu's module folder to the run_tree.
// Currently need to do this for Compiler.

#if os(Windows) {
    let PATH_SEPERATOR = '\\';
    let OCULUS_SDK_PATH     = "sup\\ovr_sdk_win_1.43.0\\LibOVR\\Lib\\Windows\\x64\\Release\\VS2017";
    let OCULUS_INCLUDE_PATH = "sup\\ovr_sdk_win_1.43.0\\LibOVR\\Include";

    #import "microsoft_craziness";
} else {
    let PATH_SEPERATOR = '/';
}

func copy_file(src: string, dst: string) {
    var src_contents = read_entire_file(src);
    if src_contents.success {
        write_entire_file(dst, src_contents.result);
    }
}

func setup_debug_config(compiler: *Compiler) {
    compiler_add_preload_definition(compiler, "DEBUG");
}

func @metaprogram main(argc: int32, argv: **uint8) {
    var as_metaprogram = false;
    var compile_c_libs = false;
    var update_module_deps = false;

    enum Config {
        DEBUG;
        RELEASE;
    }

    var config = Config.DEBUG;

    for 0..argc-1 {
        var s: string;
        s.data = argv[it];
        s.length = cast() strlen(s.data);

        if s == "meta" {
            as_metaprogram = true;
            // printf("Running game as metaprogram.\n");
        }

        if s == "build_libs" {
            compile_c_libs = true;
        }

        if s == "update_module_deps" {
            update_module_deps = true;
        }

        if s == "init" {
            compile_c_libs     = true;
            update_module_deps = true;
        }
    }

    var options: Build_Options;
    options.executable_name = "run_tree/game";
    // options.emit_llvm_ir = true;
    // options.verbose_diagnostics = true;
    var compiler = create_compiler_instance(*options);

    switch (config) {
        case .DEBUG:
            setup_debug_config(compiler);
        case .RELEASE:
            // @TODO
    }

    var cwd = basename(@filepath);
    printf("build.jyu path: %.*s\n", cwd.length, cwd.data);

    mkdir("build");

    compiler_add_library_search_path(compiler, concatenate(cwd, "/src"));
    compiler_add_library_search_path(compiler, concatenate(cwd, "/run_tree"));
    compiler_add_library_search_path(compiler, concatenate(cwd, "/build"));
    compiler_add_library_search_path(compiler, cwd);

    if compile_c_libs {
        compile_c_lib("src/nuklear.c", "build/nuklear");
    }

    compiler_add_compiled_object_for_linking(compiler, "build/nuklear.o");

    #if os(Windows) {
        var builder: String_Builder;
        builder.init();
        defer builder.reset();

        builder.append(cwd);
        builder.putchar(PATH_SEPERATOR);
        builder.append(OCULUS_SDK_PATH);

        var path = builder.to_string();
//         printf("Oculus path: %.*s\n", path.length, path.data);
        compiler_add_library_search_path(compiler, path);

        free(path);

        builder.reset();
        builder.init();

        builder.append(cwd);
        builder.putchar(PATH_SEPERATOR);
        builder.append(OCULUS_INCLUDE_PATH);

        path = builder.to_string();

//         printf("Oculus include: %.*s\n", path.length, path.data);
        compiler_add_library_search_path(compiler, path);

        free(path);
    }

    if compiler_load_file(compiler, "src/main.jyu") != true return;
    if compiler_typecheck_program(compiler) != true return;
    if compiler_generate_llvm_module(compiler) != true return;

    var out_modules = concatenate(cwd, "/run_tree/modules");

    if update_module_deps {
        mkdir(to_c_string(out_modules));

        // Copy jiyu library to run tree
        var jiyu_modules = compiler_system_get_default_module_search_path();
        copy_file(concatenate(jiyu_modules, "/jiyu.dll"),      concatenate(cwd, "/run_tree/jiyu.dll"));
        copy_file(concatenate(jiyu_modules, "/libjiyu.so"),    concatenate(cwd, "/run_tree/libjiyu.so"));
        copy_file(concatenate(jiyu_modules, "/libjiyu.dylib"), concatenate(cwd, "/run_tree/libjiyu.dylib"));

        // Copy some needed modules
        copy_file(concatenate(jiyu_modules, "/Math.jyu"), concatenate(out_modules, "/Math.jyu"));
        copy_file(concatenate(jiyu_modules, "/LibC.jyu"), concatenate(out_modules, "/LibC.jyu"));
    }

    var src_dir = concatenate(cwd, "/src");
    // Always copy the Engine.jyu source to the final module directory.
    copy_file(concatenate(src_dir, "/Engine.jyu"), concatenate(out_modules, "/Engine.jyu"));

    if as_metaprogram {
        set_working_directory("run_tree");

        var args: [..] *uint8;
        args.add("meta");

        if compiler_run_metaprogram(compiler, cast() args.count, args.data) != true return;
    } else {
        if compiler_emit_object_file(compiler) != true return;
        if compiler_run_default_link_command(compiler) != true return;
    }

//     destroy_compiler_instance(compiler);
}
